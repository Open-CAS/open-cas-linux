#!/bin/bash
#
# Copyright(c) 2012-2022 Intel Corporation
# SPDX-License-Identifier: BSD-3-Clause
#

. $(dirname $3)/conf_framework

# Check whether version A is the same as (or newer than) version B.
#
# Version consists of three elements: major, minor and sub.
# The last argument (GT_LVL) tells at which level it is acceptable
# for version A to be newer than B. It can be "major", "minor", "sub"
# or unspecified.
# - For GT_LVL="major" used, then all versions that are newer than B
#   are accepted.
# - For GT=LVL="minor" only versions that are newer and have the same
#   major number.
# - For GT_LVL="sub" only version that are newer and have the same major
#   and minor number are accepted.
# - For GT_LVL unspecified version A needs to be exactly the same as
#   version B.
compare_version () {
	MAJOR_A=$1
	MINOR_A=$2
	SUB_A=$3
	MAJOR_B=$4
	MINOR_B=$5
	SUB_B=$6
	GT_LVL=$7
	if   [ "$MAJOR_A"  -eq "$MAJOR_B" ]; then
		if    [ "$MINOR_A" -eq "$MINOR_B" ]; then
			if    [ "$SUB_A" -eq "$SUB_B" ]; then
				return 0
			elif  [ -n "$GT_LVL" ] && [ "$SUB_A" -gt "$SUB_B" ]; then
				return 0
			fi
		elif  [ "$GT_LVL" = "major" -o "$GT_LVL" = "minor" ] &&
			  [ "$MINOR_A" -gt "$MINOR_B" ]; then
			return 0
		fi
	elif  [ "$GT_LVL" = "major" ] && [ "$MAJOR_A" -gt "$MAJOR_B" ]; then
		return 0
	fi
	return 1
}

compare_kernel_version () {
    compare_version $LINUX_MAJOR $LINUX_MINOR $LINUX_SUB $1 $2 $3 $4
}
compare_rhel_kernel_version () {
    compare_version $RHEL_MAJOR $RHEL_MINOR $RHEL_SUB $1 $2 $3 $4
}

check () {
	cur_name=$(basename $2)
	config_file_path=$1
	LINUX_VERSION_CODE=$(get_define $cur_name "LINUX_VERSION_CODE" "generated/uapi/linux/version.h")
	RHEL_RELEASE=$(get_define $cur_name "RHEL_RELEASE" "generated/uapi/linux/version.h")
	LINUX_MAJOR=$((LINUX_VERSION_CODE >> 16 & 0xff))
	LINUX_MINOR=$((LINUX_VERSION_CODE >> 8 & 0xff))
	LINUX_SUB=$((LINUX_VERSION_CODE & 0xff))

	if [ -n $RHEL_RELEASE ]; then
		#it's RHEL, check versions to see if the workaround is needed

		IFS=. read -a arr <<< $RHEL_RELEASE
		RHEL_MAJOR=${arr[0]}
		RHEL_MINOR=${arr[1]}
		RHEL_SUB=${arr[2]}

		#check linux kernel version
		if compare_kernel_version 4 18 0; then
			#check rhel kernel version
			if compare_rhel_kernel_version 305 45 1 "minor"; then
				echo $cur_name "1" >> $config_file_path; #workaround needed
				return
			fi

			if compare_rhel_kernel_version 348 7 1 "major"; then
				echo $cur_name "1" >> $config_file_path; #workaround needed
				return
			fi
		fi
	fi
	echo $cur_name "2" >> $config_file_path; #no workaround needed
}

apply() {
	case "$1" in
	"1")
		add_define "cas_blk_queue_exit(q) \
			percpu_ref_put(&q->q_usage_counter);
		"
		;;
	"2")
		add_define "cas_blk_queue_exit(q) "
		;;
	*)
		exit 1
	esac
}

conf_run $@
